{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","slice","calculateWinner","setState","handleClick","status","winner","renderSquare","React","Component","Game","lines","rowComplete","length","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"iPAIE,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAASC,QAASF,EAAME,SACvCF,EAAMG,O,IAKPC,E,kDACJ,WAAYJ,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,QAASC,MAAM,GAAGC,KAAK,MACvBC,SAAS,GAJM,E,wDAQPC,GACV,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQM,QAGhCC,EAAgBP,IAAYA,EAAQI,KAIvCJ,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKG,SAAS,CACZR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,a,mCAIZC,GAAI,IAAD,OACd,OACE,kBAACX,EAAD,CACII,MAAOQ,KAAKN,MAAMC,QAAQI,GAC1BR,QAAW,kBAAM,EAAKa,YAAYL,Q,+BAMxC,IACIM,EADEC,EAASJ,EAAgBF,KAAKN,MAAMC,SAW1C,OAREU,EADCC,GAAoB,IAAVA,EACF,WAAaA,EAEL,IAAXA,EACG,aAECN,KAAKN,MAAMI,QAAU,IAAM,KAAO,UAI5C,6BACE,yBAAKR,UAAU,UAAUe,GACzB,yBAAKf,UAAU,aACZU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAErB,yBAAKjB,UAAU,aACZU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,IAErB,yBAAKjB,UAAU,aACZU,KAAKO,aAAa,GAClBP,KAAKO,aAAa,GAClBP,KAAKO,aAAa,S,GA7DTC,IAAMC,WAoEpBC,E,uKAEF,OACE,yBAAKpB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,OAEF,yBAAKH,UAAU,aACb,8BACA,mC,GATSkB,IAAMC,WAiBzB,SAASP,EAAgBP,GAcvB,IAbA,IAAMgB,EAAQ,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGLC,EAAc,CAAC,GAEVb,EAAI,EAAGA,EAAIY,EAAME,OAAQd,IAAK,CAAC,IAAD,cACnBY,EAAMZ,GADa,GAC9Be,EAD8B,KAC3BC,EAD2B,KACxBC,EADwB,KAIrC,GAAIrB,EAAQmB,IAAMnB,EAAQmB,KAAOnB,EAAQoB,IAAMpB,EAAQmB,KAAOnB,EAAQqB,GACpE,OAAOrB,EAAQmB,GAKdf,GAAK,IAAwB,IAAnBa,EAAYb,IACpBJ,EAAQmB,IAAMnB,EAAQoB,IAAMpB,EAAQqB,KACrCJ,EAAYb,IAAK,GAMvB,OAAGa,EAAY,KAAOA,EAAY,KAAOA,EAAY,GAC5C,EAGF,KAKTK,IAASC,OACP,kBAACR,EAAD,MACAS,SAASC,eAAe,W","file":"static/js/main.e3ef6ca4.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\n  function Square(props) {\r\n    return (\r\n      <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n      </button>\r\n    );\r\n  }\r\n\r\n  class Board extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = {\r\n        squares: Array(9).fill(null),\r\n        xIsNext: true,\r\n      };\r\n    }\r\n\r\n    handleClick(i) {\r\n      const squares = this.state.squares.slice();\r\n\r\n      //Checking if game is complete or Square is filled, then no need to do anything else.\r\n      if(calculateWinner(squares) || squares[i]) {\r\n        return;\r\n      }\r\n\r\n      squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n      this.setState({\r\n        squares: squares,\r\n        xIsNext: !this.state.xIsNext,\r\n      });\r\n    }\r\n\r\n    renderSquare(i) {\r\n      return (\r\n        <Square \r\n            value={this.state.squares[i]} \r\n            onClick = {() => this.handleClick(i)}\r\n          />\r\n      );\r\n    }\r\n  \r\n    render() {\r\n      const winner = calculateWinner(this.state.squares);\r\n      let status;\r\n      if(winner && winner !==0) {\r\n        status = 'Winner: ' + winner;\r\n      }\r\n      else if(winner === 0) {\r\n        status = \"Game Draw\";        \r\n      } else {\r\n        status = (this.state.xIsNext ? 'X' : 'O') + \"'s turn\";\r\n      }      \r\n  \r\n      return (\r\n        <div>\r\n          <div className=\"status\">{status}</div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(0)}\r\n            {this.renderSquare(1)}\r\n            {this.renderSquare(2)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(3)}\r\n            {this.renderSquare(4)}\r\n            {this.renderSquare(5)}\r\n          </div>\r\n          <div className=\"board-row\">\r\n            {this.renderSquare(6)}\r\n            {this.renderSquare(7)}\r\n            {this.renderSquare(8)}\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  class Game extends React.Component {\r\n    render() {\r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{/* status */}</div>\r\n            <ol>{/* TODO */}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  //Helper function for Declaring a winnner\r\n  function calculateWinner(squares) {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    let rowComplete = [3];\r\n    \r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n\r\n      //Here, checking if it is null or matches loop items' conditions for tictactoe\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }      \r\n\r\n      //Checking for first 3 items of lines array (i.e. 3 rows of board) to see if filled => Draw      \r\n      \r\n      if(i <= 2 && rowComplete[i] !== true) {\r\n        if(squares[a] && squares[b] && squares[c]) {\r\n          rowComplete[i] = true;\r\n        }\r\n        \r\n      }\r\n    }\r\n\r\n    if(rowComplete[0] === rowComplete[1] === rowComplete[2]) {\r\n      return 0;\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  // ========================================\r\n  \r\n  ReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n  );\r\n  "],"sourceRoot":""}